% This file is part of the project CLASS (https://github.com/beckel/class).
% Licence: GPL 2.0 (http://www.gnu.org/licenses/gpl-2.0.html)
% Copyright: ETH Zurich & TU Darmstadt, 2012
% Authors: Christian Beckel (beckel@inf.ethz.ch), Leyna Sadamori (sadamori@inf.ethz.ch)

function plot_roc_curves_mcc()
	
	result_path = 'results/classification/26/sffs/';
	figure_path = 'plot/images/roc/';

    labels = { ...
         {'Age', 1};...
         {'Age', 2};...
         {'Age', 3};...
        {'Singles', 1};...
        {'Singles', 2};...
%         'Singles';...
    };
                   
    labelsInPlot = { ...
        'age (1)';...
        'age (2)';...
        'age (3)';...
        'singles (1)';...
        'singles (2)';...
%         'all\_employed';...
%         'cooking (el.)';...
%         'employed';...
%         'family';...
%         'lightblubs (ordin.)';...
%         '#children = 0';...
%         'age\_house (old)';...
%         '#residents (<=2)';...
%         'retired';...
%         'single';...
%         'unoccupied';...
%%%%%%%%%%%%%%%%%%%
%         'high income';...
%         '#residents (>=3)';...
%         'occupied';...
%         'non_single';...
    };

    methods = { ...
        'knn_undersampling';...
        'lda';...
        'mahal';...
        'svm';...
        'adaboost';...
        };
    
    colors = { ...
            'r'; ...
            'b'; ...
            'k'; ...
            'g'; ...
            [1,0.4,0.6];...
            };

    l_legend = { ...
        'knn';...
        'lda';...
        'mahal';...
        'svm';...
        'adaboost';...
        };
    
    width = 20;
    height = 20;
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    for l = 1:length(labels)
        
        tmp = labels{l};
        label = tmp{1};
        basis = tmp{2};
        
        %% Generate ROCs
        rocs = {};
        idx = [];
        for m = 1:length(methods)
            method = methods{m};
            load([result_path, 'sCR-', label, '_mcc_', method]);
            [ rocs{end+1}, idx(:,end+1) ] = generate_roc(sCR, basis, method);
        end
        
        %% Plot results
        fig_h = figure();
        hold on;
        roc_handles = [];
        cross_handles = [];
        for m = 1:length(methods)
            r = rocs{m};
            roc_handles(end+1) = plot(r(1,:), r(2,:), 'Color', colors{m});
            
            % plot decision boundary
            if ~isnan(idx(1,m))
                cross_handles(end+1) = plot(idx(1,m), idx(2,m), 'x', 'Color', colors{m});
            end

        end
        
        % plot diagonal line
        line_x =  0 : 0.01 : 1;
        line_y =  0 : 0.01 : 1;
        plot(line_x, line_y, '.', 'Color', [0.5 0.5 0.5]);

        xlim([0, 1]);
        ylim([0, 1]);

        set(gca, 'YGrid', 'on');
        set(gca, 'XGrid', 'on');

        ylabel('True positive rate (Recall)');
        xlabel('False positive rate');
        title(labelsInPlot{l}, 'FontSize', 18);
        
        legend(roc_handles, l_legend, 'Location', 'SE'); 

        fig_h = make_report_ready(fig_h, 'size', 'roc_presentation');
    
        % replace line widht of cross handles
        for h = 1:length(cross_handles)
            set(cross_handles, 'MarkerSize', 12);
        end
        
%         y_ticks = get(gca, 'YTick');
%         y_tick_labels = cell(1, length(y_ticks));
%         for i = 1:length(y_ticks)
%            y_tick_labels{i} = [num2str(y_ticks(i)*200), '%'];
%         end
%         set(gca, 'YTickLabel', y_tick_labels);

        % Save figure
        filename = ['roc_', label, '_', basis];
        warning off
        mkdir(figure_path);
        warning on
        saveas(fig_h, [figure_path, filename, '.eps'], 'psc2');
        saveas(fig_h, [figure_path, filename, '.jpg']);
        close(fig_h);    
    end
end


